"use strict";
/**
 * Created by Malindu Warapitiya on 10/23/16.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const node_path_1 = __importDefault(require("node:path"));
const node_stream_1 = require("node:stream");
const node_child_process_1 = require("node:child_process");
const plugin_error_1 = __importDefault(require("plugin-error"));
const which_1 = __importDefault(require("which"));
const utils_1 = require("./utils");
const requiredFileOpts = {
    'package.json': {
        cmd: 'yarn',
        cwd: '',
        args: [],
        spawnOptions: {
            stdio: 'inherit',
            shell: true,
        },
    },
};
const gulpYarn = (gulpYarnOptions) => {
    return new node_stream_1.Transform({
        objectMode: true,
        transform(chunk, _encoding, callback) {
            if (chunk === undefined || chunk === null) {
                // Return empty file
                callback(null, chunk);
                return;
            }
            const basePath = node_path_1.default.basename(chunk.path);
            const command = requiredFileOpts[basePath];
            // If Not specific command
            if (!command) {
                callback();
                return;
            }
            const [error, listOfArgs] = (0, utils_1.resolveYarnOptions)(gulpYarnOptions);
            if (error) {
                callback(error);
                return;
            }
            command.cwd = node_path_1.default.dirname(chunk.path);
            command.args = listOfArgs;
            command.spawnOptions.cwd = command.cwd || process.cwd();
            try {
                const commandPath = which_1.default.sync(command.cmd);
                const cmd = (0, node_child_process_1.spawn)(`"${commandPath}"`, command.args, command.spawnOptions);
                cmd.once('close', (code) => {
                    if (code !== 0) {
                        const error = new plugin_error_1.default(utils_1.PLUGIN_NAME, `${command.cmd} exited with non-zero code ${code}.`);
                        callback(error);
                        return;
                    }
                    callback(null, chunk);
                });
            }
            catch (error) {
                const catchError = new plugin_error_1.default(utils_1.PLUGIN_NAME, error, { showStack: true });
                callback(catchError);
            }
        },
    });
};
// Plugin level function(dealing with files)
gulpYarn.default = gulpYarn;
module.exports = gulpYarn;
