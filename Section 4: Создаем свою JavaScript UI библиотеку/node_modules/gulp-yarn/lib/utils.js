"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveYarnOptions = exports.formatArguments = exports.formatArgument = exports.PLUGIN_NAME = void 0;
/**
 * Created by Malindu Warapitiya on 1/10/22.
 */
const plugin_error_1 = __importDefault(require("plugin-error"));
const commands_1 = require("./commands");
exports.PLUGIN_NAME = 'gulpYarn';
/**
 * Format argument with double dashes in-front
 * @param args string
 */
const formatArgument = (args) => {
    return args.trim();
};
exports.formatArgument = formatArgument;
/**
 * Formant multiple arguments
 * @param args string[] | string
 * @returns {*}
 */
const formatArguments = (args) => {
    if (Array.isArray(args))
        return args.map(item => (0, exports.formatArgument)(item));
    return [(0, exports.formatArgument)(args)];
};
exports.formatArguments = formatArguments;
/**
 * Resolve Options passed to plugin
 * @param gulpYarnOptions
 */
const resolveYarnOptions = (gulpYarnOptions) => {
    if (gulpYarnOptions) {
        let error = null;
        const listOfCommands = [];
        const { args, ...otherOptions } = gulpYarnOptions;
        for (const [key, value] of Object.entries(otherOptions)) {
            if (key in commands_1.Commands) {
                if (value === true) {
                    const _command = commands_1.Commands[key];
                    listOfCommands.push(_command);
                }
            }
            else {
                const msg = `'${key}' option is not supported by the plugin. Please use 'args' option.`;
                error = new plugin_error_1.default(exports.PLUGIN_NAME, msg);
                return [error, []];
            }
        }
        if (!args)
            return [null, listOfCommands];
        if (Array.isArray(args) || typeof args === 'string') {
            const formattedArgs = (0, exports.formatArguments)(args);
            listOfCommands.push(...formattedArgs);
            return [null, listOfCommands];
        }
        else {
            const error = new plugin_error_1.default(exports.PLUGIN_NAME, '"Args" option is not in valid type.');
            return [error, []];
        }
    }
    return [null, []];
};
exports.resolveYarnOptions = resolveYarnOptions;
